// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rusq/dagproc (interfaces: Node)

// Package mock_dagproc is a generated GoMock package.
package mock_dagproc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockNode) Do() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do")
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockNodeMockRecorder) Do() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockNode)(nil).Do))
}

// ID mocks base method.
func (m *MockNode) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockNodeMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockNode)(nil).ID))
}

// ParentIDs mocks base method.
func (m *MockNode) ParentIDs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ParentIDs indicates an expected call of ParentIDs.
func (mr *MockNodeMockRecorder) ParentIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentIDs", reflect.TypeOf((*MockNode)(nil).ParentIDs))
}
